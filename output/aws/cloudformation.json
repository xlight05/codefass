{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "An example template with an IAM role for a Lambda state machine.",
  "Resources" : {
    "LambdaExecutionRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : "lambda.amazonaws.com"
            },
            "Action" : "sts:AssumeRole"
          } ]
        }
      }
    },
    "sequenceOne" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Handler" : "index.handler",
        "Role" : {
          "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ]
        },
        "Code" : {
          "ZipFile" : "exports.handler = (event, context, callback) => {\n    callback(null, \"Hello From Sequence One!\");\n};\n"
        },
        "Runtime" : "nodejs12.x",
        "Timeout" : "25"
      }
    },
    "sequenceTwo" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Handler" : "index.handler",
        "Role" : {
          "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ]
        },
        "Code" : {
          "ZipFile" : "exports.handler = (event, context, callback) => {\n    callback(null, \"Hello From Sequence Two!\");\n};\n"
        },
        "Runtime" : "nodejs12.x",
        "Timeout" : "25"
      }
    },
    "parallelOne" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Handler" : "index.handler",
        "Role" : {
          "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ]
        },
        "Code" : {
          "ZipFile" : "exports.handler = (event, context, callback) => {\n    callback(null, \"Hello From Parallel One!\");\n};\n"
        },
        "Runtime" : "nodejs12.x",
        "Timeout" : "25"
      }
    },
    "parallelTwo" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Handler" : "index.handler",
        "Role" : {
          "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ]
        },
        "Code" : {
          "ZipFile" : "exports.handler = (event, context, callback) => {\n    callback(null, \"Hello From Parallel Two!\");\n};\n"
        },
        "Runtime" : "nodejs12.x",
        "Timeout" : "25"
      }
    },
    "StatesExecutionRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ {
                "Fn::Sub" : "states.${AWS::Region}.amazonaws.com"
              } ]
            },
            "Action" : "sts:AssumeRole"
          } ]
        },
        "Path" : "/",
        "Policies" : [ {
          "PolicyName" : "StatesExecutionPolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [ {
              "Effect" : "Allow",
              "Action" : [ "lambda:InvokeFunction" ],
              "Resource" : "*"
            } ]
          }
        } ]
      }
    },
    "MyStateMachine" : {
      "Type" : "AWS::StepFunctions::StateMachine",
      "Properties" : {
        "DefinitionString" : {
          "Fn::Sub" : [ "{\"Comment\":\"Auto generated serverless workflow from FaaS\",\"StartAt\":\"ChoiceBlock\",\"States\":{\"sequenceOne\":{\"Type\":\"Task\",\"Resource\":\"${sequenceOneArn}\",\"Next\":\"sequenceTwo\"},\"sequenceTwo\":{\"Type\":\"Task\",\"Resource\":\"${sequenceTwoArn}\",\"End\":true},\"par\":{\"Type\":\"Parallel\",\"End\":true,\"Branches\":[{\"StartAt\":\"parallelOne\",\"States\":{\"parallelOne\":{\"Type\":\"Task\",\"Resource\":\"${parallelOneArn}\",\"End\":true}}},{\"StartAt\":\"parallelTwo\",\"States\":{\"parallelTwo\":{\"Type\":\"Task\",\"Resource\":\"${parallelTwoArn}\",\"End\":true}}}]},\"ChoiceBlock\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.type\",\"Next\":\"sequenceOne\",\"StringEquals\":\"seq\"}],\"Default\":\"par\"}}}", {
            "sequenceOneArn" : {
              "Fn::GetAtt" : [ "sequenceOne", "Arn" ]
            },
            "sequenceTwoArn" : {
              "Fn::GetAtt" : [ "sequenceTwo", "Arn" ]
            },
            "parallelOneArn" : {
              "Fn::GetAtt" : [ "parallelOne", "Arn" ]
            },
            "parallelTwoArn" : {
              "Fn::GetAtt" : [ "parallelTwo", "Arn" ]
            }
          } ]
        },
        "RoleArn" : {
          "Fn::GetAtt" : [ "StatesExecutionRole", "Arn" ]
        }
      }
    }
  }
}
